{
  "$id": "https://raw.githubusercontent.com/fovea-research/cacao-json-schema/main/data-types/signature.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "signature",
  "description": "The 'signature' data type captures the actual digital signature and meta-data about the signature and uses the JSON object type [RFC8259] for serialization. See section A.2 in the appendix for a detailed example. NOTE: All of the properties in this data type, except the value property, can be considered 'claims' per JWS [RFC7515]. It is important to note that CACAO signatures do not use the JWS [RFC7515] header construct. (One of the following properties MUST be populated, 'public_keys' (preferred), 'cert_url', or 'thumbprint'.)",
  "type": "object",
  "properties": {
    "type": {
      "type": "string",
      "description": " The value of this property MUST be signature.",
      "enum": [
        "signature"
      ]
    },
    "spec_version": {
      "type": "string",
      "enum": [
        "1.1"
      ],
      "description": "The version of the specification used to represent this signature. The value of this property MUST be '1.1' to represent the version of this specification. "
    },
    "id": {
      "$ref": "https://raw.githubusercontent.com/fovea-research/cacao-json-schema/main/data-types/identifier.json",
      "description": "A value that uniquely identifies the signature. All signatures with the same ID are considered different versions of the same signature and the version of the signature is identified by its modified property."
    },
    "created_by": {
      "$ref": "https://raw.githubusercontent.com/fovea-research/cacao-json-schema/main/data-types/identifier.json",
      "description": "An ID that represents the entity that created this signature. The ID MUST represent a STIX 2.1+ identity object."
    },
    "created": {
      "$ref": "https://raw.githubusercontent.com/fovea-research/cacao-json-schema/main/data-types/timestamp.json",
      "description": "The time at which this signature was originally created. The creator can use any time it deems most appropriate as the time the signature was created, but it MUST be precise to the nearest millisecond (exactly three digits after the decimal place in seconds). The created property MUST NOT be changed when creating a new version of the object."
    },
    "modified": {
      "$ref": "https://raw.githubusercontent.com/fovea-research/cacao-json-schema/main/data-types/timestamp.json",
      "description": "The time that this particular version of the signature was last modified. The creator can use any time it deems most appropriate as the time that this version of the signature was modified, but it MUST be precise to the nearest millisecond (exactly three digits after the decimal place in seconds). The modified property MUST be later than or equal to the value of the created property."
    },
    "revoked": {
      "type": "boolean",
      "description": "A boolean that identifies if the signature creator deems that this signature is no longer valid. The default value is 'false'."
    },
    "signee": {
      "type": "string",
      "description": "The name of the entity or organization that produced this signature. This property is similar to the X.509 fields."
    },
    "valid_from": {
      "$ref": "https://raw.githubusercontent.com/fovea-research/cacao-json-schema/main/data-types/timestamp.json",
      "description": "The time from which this signature is considered valid. If omitted, the signature is valid at all times or until the timestamp defined by 'valid_until'."
    },
    "valid_until": {
      "$ref": "https://raw.githubusercontent.com/fovea-research/cacao-json-schema/main/data-types/timestamp.json",
      "description": "The time at which this signature should no longer be considered valid. If the 'valid_until' property is omitted, then there is no constraint on the latest time for which the signature is valid. This property MUST be greater than the timestamp in the 'valid_from' property if the 'valid_from' property is defined."
    },
    "related_to": {
      "$ref": "https://raw.githubusercontent.com/fovea-research/cacao-json-schema/main/data-types/identifier.json",
      "description": "The CACAO playbook that this signature is for. The value of this property MUST be a CACAO playbook id."
    },
    "related_version": {
      "$ref": "https://raw.githubusercontent.com/fovea-research/cacao-json-schema/main/data-types/timestamp.json",
      "description": "The version of the CACAO playbook that this signature is for. The value of this property MUST be the 'modified' 'timestamp' from the CACAO playbook that this signature is for."
    },
    "sha256": {
      "type": "string",
      "description": "A base64URL.encoded SHA256 hash of the canonicalized CACAO playbook data to be signed. See section 2.5.2 step 6."
    },
    "algorithm": {
      "type": "string",
      "description": "This property identifies the algorithm intended for use with the key and is a case-sensitive ASCII string. The values for this property MUST come from the 'signature-algorithm-type-ov' vocabulary. This property is called 'alg' in section 4.4 of [RFC7517]."
    },
    "public_keys": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "minItems": 1,
      "description": "This property 'contains a chain (X.509 certificate chain) of one or more PKIX certificates [RFC5280]. The certificate chain is represented as a JSON array of certificate value strings. Each string in the array is a base64-encoded (Section 4 of [RFC4648] -- not base64URL.encoded) DER [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the key value MUST be the first certificate. This MAY be followed by additional certificates, with each subsequent certificate being the one used to certify the previous one. The key in the first certificate MUST match the public key.' This property is called 'x5c' in section 4.7 of [RFC7517] and has the following requirements as defined in that section."
    },
    "cert_url": {
      "type": "string",
      "description": "This property 'is a URI [RFC3986] that refers to a resource for an X.509 public key certificate or certificate chain [RFC5280]. The identified resource MUST provide a representation of the certificate or certificate chain that conforms to RFC 5280 [RFC5280] in PEM-encoded form, with each certificate delimited as specified in Section 6.1 of RFC 4945 [RFC4945]. The key in the first certificate MUST match the public key.' 'The protocol used to acquire the resource MUST provide integrity protection; an HTTP GET request to retrieve the certificate MUST use TLS [RFC2818] [RFC5246]; the identity of the server MUST be validated, as per Section 6 of RFC 6125 [RFC6125].' This property is called 'x5u' in section 4.6 of [RFC7517] and has the following requirements as defined in that section."
    },
    "thumbprint": {
      "type": "string",
      "description": "This property 'is a base64URL.encoded SHA-256 thumbprint (a.k.a. digest, X.509 certificate SHA-256 thumbprint) of the DER encoding of an X.509 certificate [RFC5280]. Note that certificate thumbprints are also sometimes known as certificate fingerprints. The key in the certificate MUST match the public key.' If this property is provided then the created_by property MUST also be provided and the public_key or cert_url MUST be conveyed via that identity object. This property is called 'x5t#S256' in section 4.9 of [RFC7517] and has the following requirements as defined in that section."
    },
    "value": {
      "type": "string",
      "description": "A base64URL.encoded signature as defined in JWS [RFC7515] and JCS/CT but without the JWS header or payload. This is because the algorithm and cert/key information is kept in plaintext JSON in the signature object. NOTE: In traditional JWS / JWT this property would have three parameters separated by periods '.'. The first is the JWS [RFC7515] header, the second is the payload which is omitted per JCS/CT, and the third is the actual signature. So instead of AAAA.BBBB.CCCC or AAAA..CCCC this property will only have the signature CCCC."
    }
  },
  "required": [
    "type",
    "spec_version",
    "id",
    "created",
    "modified",
    "signee",
    "related_to",
    "related_version",
    "sha256",
    "algorithm",
    "value"
  ],
  "dependentRequired": {
    "thumbprint": [
      "created_by"
    ]
  },
  "unevaluatedProperties": false
}